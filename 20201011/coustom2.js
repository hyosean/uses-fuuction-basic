/*
    함수의 종류
    1. 대입형 함수 : 변수에 익명함수를 대입
    2. 선언적 함수 : 함수를 정의할때 이름을붙여 선언
    - 위 2개는 함수를 정의한후 호출해야 실행되는 함수이다

    3. 즉시 실행 함수 : 함수를 정의함과 동시에 자기자신을 호출
    (함수 정의 부)(함수호출부);
    - 즉시 실행 함수를 사용하는 이유
        1. 캡슐화 : 즉시실행함수 안쪽에 있는 변수는 외부에서 접근 불가
        2. 내부에 있는 특정 변수값을 한번에 초기화
*/
(function(num1,num2) {
    alert(num1+num2);
    var num = 20;
})(2,3); //즉시실행이기 때문에 이름이없다 * 실행후 값이 초기화된다

console.log(num);//값을 외부에서 접근불가(값 보호)
//-----------------------------------------------------------------
/*
 변수의 스코프 (유효범위)
 1. 전역 변수
    : 특정 코드 블록 밖에서 선언된 변수
    - 코드전체에서 실행
    - 여러개의 함수들이 같은 값을 공유해야 할때
    - 전역변수는 최소화해야함 오염방지
    - 전역변수는 window 객체에 저장
 2. 지역 변수
    : 특정 코드 블록 안에서 선언된 변수
    - 해당 코드블록 안에서만 실행
    - 특정 정보값이 해당함수에서만 전용으로 사용되어야 할때
*/
var result = "변수";
function test() {
    console.log(result);
    var result2 = "지역변수";
    console.log(result2); //o
    return result2;
}
console.log(result);//o
console.log(result2); //x
test();//0
//------------------------------------------------------------
/*
호이스팅
- 반복문 조건문 안의 지역변수
- 블록안에서 지역으로 유지되어야할 변수값이 강제로 window객체까지 끌어져나가는현상(버그)
*/
for (var i = 0; i < i<3; i++) {
    var result3 = "지역변수";    
}//호이스팅
console.log(result3);//호이스팅 값 반환이 되버림
var lis = document.getElementsByClassName("lis");
for (var i = 0; i < 3; i++) {
    lis[i].onclick = function() {
        console.log(i);
    }
}
//호이스팅으로 인한 값반환 3
/* 즉시실행함수를 사용: 스코프를 활용하여 호이스팅 방지 */
for (var i = 0; i < 3; i++) {
    //(function() {})();
    (function(index) {
        lis[index].onclick = function() {
            console.log(index);
        }
    })(i);//변수index가 스코프로인해 값이보호되며 호이스팅으로 인한 덮여쓰여지기가 방지된다
}
//------------------------------------------------------



